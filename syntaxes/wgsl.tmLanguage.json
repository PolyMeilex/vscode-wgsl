{
  "name": "WGSL",
  "scopeName": "source.wgsl",
  "patterns": [
    {
      "include": "#line_comment"
    },
    {
      "comment": "String literal",
      "name": "string.quoted.wgsl",
      "begin": "\"",
      "end": "\""
    },
    {
      "comment": "Floating point literal",
      "name": "constant.numeric.float.wgsl",
      "match": "\\b[0-9][0-9]*\\.[0-9][0-9]*([e][+-]?[0-9]+)?\\b"
    },
    {
      "comment": "Number literal (decimal)",
      "name": "constant.numeric.decimal.wgsl",
      "match": "\\b[0-9][0-9]*(u)?\\b"
    },
    {
      "comment": "Number literal (hexadecimal)",
      "name": "constant.numeric.hexadecimal.wgsl",
      "match": "\\b0x[a-fA-F0-9]*(u)?\\b"
    },
    {
      "comment": "Boolean constant",
      "name": "constant.language.boolean.wgsl",
      "match": "\\b(true|false)\\b"
    },
    {
      "comment": "Keyword",
      "name": "keyword.other.wgsl",
      "match": "\\b(var|let|as|binding|group|stage|block|break|builtin|case|cast|compute|continue|continuing|if|default|else|elseif|entry_point|fallthrough|location|loop|premerge|private|return|switch|uniform|uniform_constant|unlsess|workgroup)\\b"
    },
    {
      "include": "#const"
    },
    {
      "comment": "Comparison operator",
      "name": "keyword.operator.comparison.wgsl",
      "match": "(&&|\\|\\||==|!=)"
    },
    {
      "comment": "Assignment operator",
      "name": "keyword.operator.assignment.wgsl",
      "match": "(\\+=|-=|/=|\\*=|%=|\\^=|&=|\\|=|<<=|>>=|=)"
    },
    {
      "comment": "Arithmetic operator",
      "name": "keyword.operator.arithmetic.wgsl",
      "match": "(!|\\+|-|/|\\*|%|\\^|&|\\||<<|>>)"
    },
    {
      "comment": "Comparison operator (second group because of regex precedence)",
      "name": "keyword.operator.comparison.wgsl",
      "match": "( <= | >= | < | > )"
    },
    {
      "include": "#types"
    },
    {
      "comment": "Function call",
      "match": "\\b([A-Za-z\\x80-\\xFF][A-Za-z0-9_\\x80-\\xFF]*|_[A-Za-z0-9_\\x80-\\xFF]+)\\s*\\(",
      "captures": {
        "1": {
          "name": "entity.name.function.wgsl"
        }
      }
    },
    {
      "comment": "Function definition",
      "begin": "\\b(fn)\\s+([A-Za-z\\x80-\\xFF][A-Za-z0-9_\\x80-\\xFF]*|_[A-Za-z0-9_\\x80-\\xFF]+)",
      "end": "[\\{;]",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.fn.wgsl"
        },
        "2": {
          "name": "entity.name.function.wgsl"
        }
      },
      "patterns": [
        {
          "include": "#line_comment"
        },
        {
          "include": "#types"
        },
        {
          "include": "#type_params"
        },
        {
          "comment": "Function arguments",
          "match": "\bfn\b",
          "name": "keyword.other.fn.wgsl"
        }
      ]
    },
    {
      "comment": "Struct type declaration",
      "begin": "\\b(struct)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
      "end": "(?<=\\})|;",
      "beginCaptures": {
        "1": {
          "name": "storage.type.wgsl"
        },
        "2": {
          "name": "entity.name.type.wgsl"
        }
      },
      "patterns": [
        {
          "include": "#code_block"
        },
        {
          "comment": "Tuple struct where",
          "begin": "\\)",
          "end": "(?=;)",
          "patterns": [
            {
              "include": "#line_comment"
            },
            {
              "include": "#types"
            }
          ]
        },
        {
          "include": "#line_comment"
        },
        {
          "include": "#types"
        }
      ]
    },
    {
      "comment": "Type alias",
      "begin": "\\b(type)\\s+([a-zA-Z_\\x80-\\xFF][a-zA-Z0-9_\\x80-\\xFF]*)",
      "end": ";",
      "beginCaptures": {
        "1": {
          "name": "storage.type.wgsl"
        },
        "2": {
          "name": "entity.name.type.wgsl"
        }
      },
      "patterns": [
        {
          "include": "#line_comment"
        },
        {
          "include": "#types"
        },
        {
          "include": "#type_params"
        }
      ]
    }
  ],
  "repository": {
    "code_block": {
      "comment": "Code block",
      "begin": "[\\{\\(]",
      "end": "[\\}\\)]",
      "patterns": [
        {
          "include": "#code_block"
        },
        {
          "include": "$self"
        }
      ]
    },
    "line_comment": {
      "comment": "Single-line comment",
      "name": "comment.line.wgsl",
      "begin": "//",
      "end": "$"
    },
    "const": {
      "comment": "Const storage modifier",
      "name": "storage.modifier.const.wgsl",
      "match": "\\bconst\\b"
    },
    "types": {
      "comment": "Types",
      "name": "storage.type.wgsl",
      "patterns": [
        {
          "include": "#void_types"
        },
        {
          "include": "#scalar_types"
        },
        {
          "include": "#other_types"
        },
        {
          "comment": "Void Types",
          "name": "storage.type.wgsl",
          "match": "\\b(struct)\\b"
        }
      ]
    },
    "void_types": {
      "comment": "Void Types",
      "name": "storage.type.wgsl",
      "match": "\\b(void)\\b"
    },
    "scalar_types": {
      "comment": "Scalar Types",
      "name": "storage.type.wgsl",
      "match": "\\b(bool|i32|u32|f32|f64)\\b"
    },
    "other_types": {
      "comment": "Vector/Matrix Types",
      "name": "storage.type.wgsl",
      "match": "\\b(vec[2-4]|mat[2-4]x[2-4]|array|ptr)\\b"
    },
    "type": {
      "comment": "A type",
      "name": "entity.name.type.wgsl",
      "match": "\\b([A-Za-z\\x80-\\xFF][_A-Za-z0-9\\x80-\\xFF]*|_[_A-Za-z0-9\\x80-\\xFF]+)\\b"
    },
    "type_params": {
      "comment": "Type parameters",
      "name": "meta.type_params.wgsl",
      "begin": "<(?![=<])",
      "end": "(?<![-])>",
      "patterns": [
        {
          "include": "#line_comment"
        },
        {
          "include": "#type_params"
        }
      ]
    }
  }
}
